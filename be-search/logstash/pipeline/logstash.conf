input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/mysql-connector-java.jar"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://host.docker.internal:3306/chart_db"
    jdbc_user => "root"
    jdbc_password => "1234"
    schedule => "*/30 * * * * *"
    statement => "
      SELECT
        p.patient_id,
        p.name,
        p.phone,
        JSON_ARRAYAGG(
          JSON_OBJECT(
            'patientDetailId',pd.patient_detail_id,
            'hospitalId',       pd.hospital_id,
            'vipType',          pd.vip_type,
            'classificationCd', pd.classification_cd,
            'firstVisitDate',   DATE_FORMAT(pd.first_visit_date, '%Y-%m-%d')
          )
          ORDER BY pd.hospital_id
        ) AS patients_json,
        GREATEST(
          p.update_time,
          (
            SELECT MAX(pd2.update_time)
            FROM patient_detail pd2
            WHERE pd2.patient_id = p.patient_id
          )
        ) AS updated_at
      FROM patient p
      LEFT JOIN patient_detail pd ON pd.patient_id = p.patient_id
      WHERE p.update_time > :sql_last_value
        OR EXISTS (
          SELECT 1
          FROM patient_detail pdx
          WHERE pdx.patient_id = p.patient_id AND pdx.update_time > :sql_last_value)
      GROUP BY p.patient_id
      ORDER BY updated_at;
    "
    use_column_value => true
    tracking_column => "updated_at"
    tracking_column_type => "timestamp"
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
    clean_run => false
  }
}

filter {
  # patients_json(JSON 문자열) -> patients(배열[객체]) 파싱
  json {
    source => "patients_json"
    target => "patients"
    skip_on_invalid_json => true
  }

  # patients에 포함된 null 요소 제거 및 타입 보정
  ruby {
    code => "
      pts = event.get('patients')
      if pts.is_a?(Array)
        # null 제거
        pts = pts.compact
        # hospitalId를 정수로 캐스팅
        pts.each do |h|
          next unless h.is_a?(Hash)
          hid = h['hospitalId']
          h['hospitalId'] = hid.to_i if !hid.nil?
        end
        event.set('patients', pts)
      else
        event.set('patients', [])
      end
    "
  }

  # phone_rev 생성(끝자리 검색 최적화용)
  ruby {
    code => "
      ph = event.get('phone')
      event.set('phone_rev', ph.to_s.reverse) if ph
    "
  }

  # 불필요 필드 정리
  mutate {
    remove_field => ["patients_json", "@version", "@timestamp", "host"]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "patient-index"
    document_id => "%{patient_id}"
    action => "update"
    doc_as_upsert => true
  }
  stdout { codec => json_lines }
}
